var RecipeBox = React.createClass({
  loadRecipesFromServer: function() {
    $.ajax({
      url: this.props.recipes_url,
      dataType: 'json',
      cache: false,
      success: function(recipes) {
        this.setState({recipes: recipes});
        console.log(this.state);
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
     });
  },
  handleRecipeSubmit: function(recipe) {
    var original_recipes = this.state.recipes;
    // Optimistically set an id on the new recipe. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    recipe.id = Date.now();
    var newRecipes = original_recipes.concat([recipe]);
    this.setState({recipes: newRecipes});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: recipe,
      success: function(recipes) {
        this.setState({recipes: recipes});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({recipes: original_recipes});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {recipes: []};
  },
  componentDidMount: function() {
    this.loadRecipesFromServer();
    setInterval(this.loadRecipesFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="recipeBox">
        <h1>Recipes</h1>
        <RecipeForm onRecipeSubmit={this.handleRecipeSubmit} categories_url="api/categories" units_url="api/units" />
        <RecipeList data={this.state.recipes} />
      </div>
    );
  }
});

var RecipeList = React.createClass({
  render: function() {
      var recipeNodes = this.props.data.map(function(recipe) {
        return (
          <Recipe
            name={recipe.name}
            key={recipe.id}
            category= {recipe.category}
            ingredients={recipe.ingredients}
            method={recipe.method}
          />
        );
    });
    return (
      <div className="recipeList">
        {recipeNodes}
      </div>
    );
  }
});

var RecipeForm = React.createClass({
  loadUnitsFromServer: function() {
    $.ajax({
      url: this.props.units_url,
      dataType: 'json',
      cache: false,
      success: function(units) {
        this.setState({units: units});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
     });
  },
  loadCategoriesFromServer: function() {
    $.ajax({
      url: this.props.categories_url,
      dataType: 'json',
      cache: false,
      success: function(categories) {
        this.setState({categories: categories });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
     });
  },
  getInitialState: function() {
    return {name: '', category: '', ingredients: ''};
  },
  componentWillMount: function() {
    this.loadUnitsFromServer();
    this.loadCategoriesFromServer();
  },
  handleAuthorChange: function(e) {
    this.setState({name: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({category: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var ingredients = this.state.ingredients.trim();
    var category = this.state.category.trim();
    if (!ingredients || !name || !category) {
      return;
    }
    this.props.onRecipeSubmit({name: name, category: category, ingredients: ingredients});
    this.setState({name: '', category: '', ingredients: '' });
  },
  renderCategories: function() {
    if (this.state.categories) {
      return this.state.categories.map(function(category, i) {
        return <option key={i} value={category}>{category}</option>;
      })
    }
  },
  render: function() {
    return (
      <form className="recipeForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Recipe name"
          value={this.state.name}
          onChange={this.handleTextChange}
        />
        <select
          placeholder="Select a category"
          value={this.state.category}
          onChange={this.handleTextChange}
        >
          {
          this.renderCategories()
          }
        </select>
        <input
          type="text"
          placeholder="Ingredients"
          value={this.state.ingredients}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

// tutorial4.js
var Recipe = React.createClass({
  render: function() {
    return (
      <div className="recipe">
        <h2 className="recipeName">
          {this.props.name}
        </h2>
        <p className="recipeCategory">
          {this.props.category}
        </p>
        <ul>
          {this.props.ingredients.map(function(ingredient,i) {
            return <li key={i}>{ingredient.quantity} {ingredient.unit}, {ingredient.name} </li>;
          })}
        </ul>
          {this.props.method}
      </div>
    );
  }
});

ReactDOM.render(
  <RecipeBox recipes_url="api/recipes" pollInterval={2000} />,
  document.getElementById('content')
);
